generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String      @id @default(cuid())
  phone                   String      @unique
  name                    String?
  email                   String?
  is_verified             Boolean?    @default(false)
  verification_code       String?
  verification_expires_at DateTime?
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt
  restaurants             Restaurant?
  templates               Template[]
}

model Restaurant {
  id                 String            @id @default(cuid())
  userId             String            @unique @map("user_id")
  name               String
  description        String?
  address            String?
  phone              String?
  whatsappNumber     String?           @map("whatsapp_number")
  logoUrl            String?           @map("logo_url")
  isActive           Boolean           @default(true) @map("is_active")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  externalMerchantId String?           @map("external_merchant_id")
  conversations      Conversation[]
  messages           Message[]
  orders             Order[]
  OutboundMessage    OutboundMessage[]
  bots               RestaurantBot[]
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageLogs          UsageLog[]
  WebhookLog         WebhookLog[]

  @@index([userId])
  @@map("RestaurantProfile")
}

model RestaurantBot {
  id               String       @id @default(cuid())
  restaurantId     String?      @unique @map("restaurant_id")
  name             String
  restaurantName   String       @map("restaurantName")
  whatsappNumber   String       @unique @map("whatsappFrom")
  accountSid       String       @map("twilioAccountSid")
  subaccountSid    String?      @map("twilioSubaccountSid")
  authToken        String       @map("twilioAuthToken")
  wabaId           String?      @map("waba_id")
  senderSid        String?      @map("sender_sid")
  verificationSid  String?      @map("verification_sid")
  status           BotStatus    @default(PENDING) @map("status")
  verifiedAt       DateTime?    @map("verified_at")
  errorMessage     String?      @map("error_message")
  supportContact   String?      @map("supportContact")
  paymentLink      String?      @map("paymentLink")
  isActive         Boolean      @default(true) @map("isActive")
  maxMessagesPerMin Int         @default(60) @map("max_messages_per_min")
  maxMessagesPerDay Int         @default(1000) @map("max_messages_per_day")
  createdAt        DateTime     @default(now()) @map("createdAt")
  updatedAt        DateTime     @updatedAt @map("updatedAt")
  restaurant       Restaurant?  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("RestaurantBot")
  @@index([restaurantId])
  @@index([whatsappNumber])
  @@index([subaccountSid])
}

model Conversation {
  id              String             @id @default(cuid())
  restaurantId    String             @map("restaurant_id")
  customerWa      String             @map("customer_wa")
  customer_name   String?
  status          ConversationStatus @default(active)
  lastMessageAt   DateTime           @map("last_message_at")
  unread_count    Int                @default(0)
  is_bot_active   Boolean            @default(true)
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  restaurant      Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  messages        Message[]
  orders          Order[]
  OutboundMessage OutboundMessage[]

  @@unique([restaurantId, customerWa])
  @@index([restaurantId, lastMessageAt])
  @@index([customerWa])
  @@map("Conversation")
}

model Message {
  id             String       @id @default(cuid())
  restaurantId   String       @map("restaurant_id")
  conversationId String       @map("conversation_id")
  direction      MsgDir
  waSid          String?      @unique @map("wa_sid")
  message_type   String
  body           String
  mediaUrl       String?      @map("media_url")
  metadata       Json?
  createdAt      DateTime     @default(now()) @map("created_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  restaurant     Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId, createdAt])
  @@index([conversationId, createdAt])
  @@map("Message")
}

model Template {
  id                   String   @id @default(cuid())
  user_id              String
  name                 String
  category             String
  language             String?  @default("en")
  header_type          String?
  header_content       String?
  body_text            String
  footer_text          String?
  buttons              Json?    @default("[]")
  variables            Json?    @default("[]")
  status               String?  @default("draft")
  whatsapp_template_id String?
  usage_count          Int?     @default(0)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  user                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([status])
}

model Order {
  id               String       @id @default(cuid())
  restaurantId     String       @map("restaurant_id")
  conversationId   String       @map("conversation_id")
  status           OrderStatus  @default(DRAFT)
  status_stage     Int          @default(0)
  order_reference  String?      @unique
  order_type       String?
  payment_method   String?
  totalCents       Int          @default(0) @map("total_cents")
  currency         String       @default("SAR")
  delivery_address String?
  delivery_lat     String?
  delivery_lng     String?
  branch_id        String?
  branch_name      String?
  branch_address   String?
  rating           Int?
  rating_comment   String?
  rated_at         DateTime?
  rating_asked_at  DateTime?
  meta             Json?        @map("meta")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  restaurant       Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items            OrderItem[]

  @@index([restaurantId, createdAt])
  @@index([status])
  @@map("Order")
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String @map("order_id")
  name       String
  qty        Int
  unitCents  Int    @map("unit_cents")
  totalCents Int    @map("total_cents")
  order      Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("OrderItem")
}

model UsageLog {
  id           String     @id @default(cuid())
  restaurantId String     @map("restaurant_id")
  action       String
  details      Json?      @default("{}")
  createdAt    DateTime   @default(now()) @map("created_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
  @@map("UsageLog")
}

model OutboundMessage {
  id                String        @id
  restaurant_id     String?
  conversation_id   String?
  to_phone          String
  from_phone        String
  body              String?
  channel           String?
  template_sid      String?
  template_name     String?
  status            String        @default("pending")
  wa_sid            String?       @unique
  error_code        String?
  error_message     String?
  metadata          Json?
  created_at        DateTime      @default(now())
  updated_at        DateTime
  Conversation      Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  RestaurantProfile Restaurant?   @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@index([channel])
  @@index([restaurant_id, created_at])
  @@index([restaurant_id, to_phone])
  @@index([to_phone, created_at])
}

model WebhookLog {
  id                String      @id
  restaurant_id     String?
  request_id        String
  method            String
  path              String
  headers           Json?
  body              Json?
  status_code       Int?
  error_message     String?
  created_at        DateTime    @default(now())
  RestaurantProfile Restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@index([restaurant_id])
}

enum BotStatus {
  PENDING
  ACTIVE
  FAILED
  VERIFYING
}

enum MsgDir {
  IN
  OUT
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum ConversationStatus {
  active
  closed
}
